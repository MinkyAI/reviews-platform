generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = "postgresql://user:password@localhost:5432/db"
}

enum QrCodeStatus {
  active
  archived
}

enum ReviewChannel {
  google
  trustpilot
  yelp
  facebook
  direct
}

enum ClickedCTA {
  google_copy
  google_direct
  contact
  none
}

enum CTAType {
  google_copy
  google_direct
  contact_email
  contact_phone
}

model Client {
  id             String       @id @default(cuid())
  name           String
  email          String       @unique
  password       String
  contactEmail   String?
  contactPhone   String?
  googlePlaceId  String?
  logoUrl        String?
  brandColors    Json?
  status         String       @default("active")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  qrCodes        QrCode[]
  locations      Location[]
  reviewSubmissions ReviewSubmission[]
  qrScans        QrScan[]
}

model Location {
  id        String       @id @default(cuid())
  name      String
  address   String?
  city      String?
  country   String?
  clientId  String
  client    Client       @relation(fields: [clientId], references: [id])
  qrCodes   QrCode[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model QrCode {
  id          String       @id @default(cuid())
  shortCode   String       @unique
  label       String
  status      QrCodeStatus @default(active)
  clientId    String
  locationId  String?
  batchId     String?
  client      Client       @relation(fields: [clientId], references: [id])
  location    Location?    @relation(fields: [locationId], references: [id])
  reviewSubmissions ReviewSubmission[]
  qrScans       QrScan[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model ReviewSubmission {
  id             String      @id @default(cuid())
  qrId           String
  clientId       String
  scanId         String
  rating         Int
  comment        String?
  googleClicked  Boolean     @default(false)
  contactClicked Boolean     @default(false)
  clickedCTA     ClickedCTA  @default(none)
  createdAt      DateTime    @default(now())
  
  qrCode         QrCode      @relation(fields: [qrId], references: [id])
  client         Client      @relation(fields: [clientId], references: [id])
  scan           QrScan      @relation(fields: [scanId], references: [id])
  ctaClicks      CTAClick[]
}

model QrScan {
  id               String   @id @default(cuid())
  qrId             String
  clientId         String
  sessionId        String
  userAgent        String?
  ipHash           String?
  createdAt        DateTime @default(now())
  
  qrCode           QrCode   @relation(fields: [qrId], references: [id])
  client           Client   @relation(fields: [clientId], references: [id])
  reviewSubmissions      ReviewSubmission[]
  
  @@index([createdAt])
  @@index([clientId, createdAt])
  @@index([qrId, createdAt])
}

model CTAClick {
  id           String   @id @default(cuid())
  submissionId String
  ctaType      CTAType
  createdAt    DateTime @default(now())
  
  submission   ReviewSubmission @relation(fields: [submissionId], references: [id])
}

model AdminUser {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AdminSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model LoginAttempt {
  id        String   @id @default(cuid())
  email     String
  ipAddress String
  success   Boolean
  createdAt DateTime @default(now())
}